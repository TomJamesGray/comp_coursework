import logging
import numpy
import matplotlib
import matplotlib.pyplot as plt
from stat_analysis.actions import base_action
from kivy.app import App
from kivy.uix.image import Image
from stat_analysis.generic_widgets.bordered import BorderedTable

logger = logging.getLogger(__name__)

class Regression(base_action.BaseAction):
    type = "stats.regression"
    view_name = "Regression"

    def __init__(self,output_widget):
        self.user_name = "XYZ"
        self.status = "OK"
        self.form = [
            {
                 "group_name":"Data",
                 "inputs":[
                    {
                        "input_type":"combo_box",
                        "data_type":"dataset",
                        "required":True,
                        "form_name":"dataset",
                        "visible_name":"Data Set",
                        "on_change":lambda x,val:x.parent_action.set_tmp_dataset(val)
                    },
                    {
                        "input_type": "combo_box",
                        "data_type": "column_numeric",
                        "get_cols_from":lambda x: x.parent_action.tmp_dataset,
                        "required": True,
                        "form_name": "x_var",
                        "visible_name": "X Variable"
                    },
                    {
                        "input_type": "combo_box",
                        "data_type": "column_numeric",
                        "get_cols_from": lambda x: x.parent_action.tmp_dataset,
                        "required": True,
                        "form_name": "y_var",
                        "visible_name": "Y Variable"
                    }]
            },
            {
                "group_name":"Regression",
                "inputs":[
                    {
                        "input_type": "check_box",
                        "required": True,
                        "form_name": "regression",
                        "visible_name": "Regression"
                    },
                    {
                        "input_type": "numeric_bounded",
                        "default": 1,
                        "step":1,
                        "min":1,
                        "max":10,
                        "required": "false",
                        "form_name": "regression_degree",
                        "required_if": "regression=True",
                        "visible_name": "Regression Degree:"
                    },
                    {
                        "input_type": "numeric_bounded",
                        "default": 2,
                        "step":1,
                        "min":0,
                        "max":10,
                        "required": "false",
                        "form_name": "regression_out_precision",
                        "visible_name": "Precision of output for regression line"
                    }]
             }
        ]
        self.output_widget = output_widget
        self.tmp_dataset = None

    def set_tmp_dataset(self,val):
        self.tmp_dataset = val

    def run(self):
        logger.info("Running action {}".format(self.type))
        if self.validate_form():
            logger.info("Form validated, form outputs: {}".format(self.form_outputs))
            vals = self.form_outputs
            dataset = App.get_running_app().get_dataset_by_name(vals["dataset"])

            # Get the data set for x and y in seperate lists
            x,y = [],[]
            x_parse = dataset.get_header_structure()[vals["x_var"]][1]
            y_parse = dataset.get_header_structure()[vals["y_var"]][1]
            for row in dataset.get_data():
                x.append(x_parse(row[vals["x_var"]]))
                y.append(y_parse(row[vals["y_var"]]))

            coeffs = numpy.polyfit(x,y,vals["regression_degree"])
            # Generate x and y values for the regression line to be displayed
            x_line = numpy.arange(min(x),max(x),0.5)
            # Get the y values from the coefficients generated by polyfit
            y_line = [sum([x*(y**(len(coeffs)-i-1)) for i,x in enumerate(coeffs)]) for y in x_line]
            # Get a representaion of the function for the output
            func = ""
            deg = len(coeffs)-1
            for coeff in coeffs:
                if func != "" and coeff > 0:
                    func += "+"
                rnd_coeff = numpy.around(coeff,int(vals["regression_out_precision"]))
                if deg > 1:
                    func += "{}x^{}".format(rnd_coeff,deg)
                elif deg == 1:
                    func += "{}x".format(rnd_coeff)
                else:
                    func += "{}".format(rnd_coeff)
                deg -= 1

            fig = plt.figure()
            axis = plt.subplot(111)
            axis.scatter(x,y)
            axis.plot(x_line,y_line)
            axis.legend()
            fig.savefig("tmp/plot.png")

            self.result_output.clear_widgets()
            self.result_output.add_widget(BorderedTable(
                headers=["Function"],data=[[func]],row_default_height=30,row_force_default=True,
                orientation="horizontal",size_hint_y=None,size_hint_x=1,for_scroller=True
            ))

            self.result_output.add_widget(Image(source="tmp/plot.png",nocache=True,size_hint_x=1,size_hint_y=None,
                                                height=500))
